import customtkinter as ctk
from tkinter import messagebox, ttk
import json
from pathlib import Path
import os

class ContractAuto_App(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title("–ê–≤—Ç–æ –î–æ–≥–æ–≤–æ—Ä")
        self.geometry("1000x700")
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.script_dir = Path(__file__).parent
        self.parent_dir = self.script_dir.parent
        self.templates_dir = self.parent_dir / "templates"
        self.output_dir = self.parent_dir.parent / "schools_output"
        
        self.schools_data = []
        self.current_school_type = ctk.StringVar(value="town")
        self.type_name_ru = ctk.StringVar(value="–ì–æ—Ä–æ–¥")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.common_values = {
            "cost_eat": ctk.DoubleVar(value=0.0),
            "day_count": ctk.IntVar(value=0),
            "date": ctk.StringVar(value=""),
            "date_conclusion": ctk.StringVar(value=""),
            "year": ctk.StringVar(value="")
        }
        
        self.create_widgets()
        self.load_data()

    def create_widgets(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview = ctk.CTkTabview(self)
        self.tabview.grid(row=0, column=0, padx=20, pady=20, sticky="nsew")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview.add("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.tabview.add("–®–∫–æ–ª—ã")
        self.tabview.add("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
        self.setup_general_tab()
        self.setup_schools_tab()
        self.setup_generation_tab()

    def setup_general_tab(self):
        tab = self.tabview.tab("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü–æ–ª—è –¥–ª—è –æ–±—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        labels = ["–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è (—Ä—É–±):", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:", "–î–∞—Ç–∞:", "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è:", "–ì–æ–¥:"]
        keys = ["cost_eat", "day_count", "date", "date_conclusion", "year"]
        
        for i, (label, key) in enumerate(zip(labels, keys)):
            ctk.CTkLabel(tab, text=label).grid(row=i, column=0, padx=10, pady=10, sticky="w")
            entry = ctk.CTkEntry(tab, textvariable=self.common_values[key])
            entry.grid(row=i, column=1, padx=10, pady=10, sticky="ew")
        
        # –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        btn_frame = ctk.CTkFrame(tab)
        btn_frame.grid(row=len(labels), column=0, columnspan=2, pady=20)
        
        ctk.CTkButton(btn_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", command=self.load_values).pack(side="left", padx=10)
        ctk.CTkButton(btn_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª", command=self.save_values).pack(side="left", padx=10)
        
        tab.grid_columnconfigure(1, weight=1)

    def setup_schools_tab(self):
        tab = self.tabview.tab("–®–∫–æ–ª—ã")
        tab.grid_columnconfigure(0, weight=1)
        tab.grid_rowconfigure(1, weight=1)
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —à–∫–æ–ª
        type_frame = ctk.CTkFrame(tab)
        type_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=10)
        
        ctk.CTkLabel(type_frame, text="–¢–∏–ø —à–∫–æ–ª:").pack(side="left", padx=10)
        ctk.CTkRadioButton(type_frame, text="–ì–æ—Ä–æ–¥", variable=self.current_school_type, 
                          value="town", command=self.update_schools_display).pack(side="left", padx=10)
        ctk.CTkRadioButton(type_frame, text="–†–∞–π–æ–Ω", variable=self.current_school_type, 
                          value="district", command=self.update_schools_display).pack(side="left", padx=10)
        
        # –¢–∞–±–ª–∏—Ü–∞ —à–∫–æ–ª
        self.schools_table_frame = ctk.CTkScrollableFrame(tab)
        self.schools_table_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—ã
        ctk.CTkButton(tab, text="–î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É", command=self.add_school).grid(row=2, column=0, pady=10)

    def setup_generation_tab(self):
        tab = self.tabview.tab("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
        tab.grid_columnconfigure(0, weight=1)
        
        # –õ–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        ctk.CTkLabel(tab, text="–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:").grid(row=0, column=0, sticky="w", padx=10, pady=5)
        self.log_text = ctk.CTkTextbox(tab, height=200)
        self.log_text.grid(row=1, column=0, sticky="nsew", padx=10, pady=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(tab)
        self.progress_bar.grid(row=2, column=0, sticky="ew", padx=10, pady=5)
        self.progress_bar.set(0)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        ctk.CTkButton(tab, text="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã", command=self.generate_contracts,
                     fg_color="green", hover_color="dark green").grid(row=3, column=0, pady=20)

    def update_schools_display(self):
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for widget in self.schools_table_frame.winfo_children():
            widget.destroy()
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Å –∫–ª–∞)
        headers = ["–®–∫–æ–ª–∞", "–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π 1-4 –∫–ª.", "–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π 5-11 –∫–ª.", "–í—Å–µ–≥–æ", "–î–µ–π—Å—Ç–≤–∏—è"]
        for i, header in enumerate(headers):
            ctk.CTkLabel(self.schools_table_frame, text=header, font=ctk.CTkFont(weight="bold")).grid(
                row=0, column=i, padx=5, pady=5)
        
        # –î–∞–Ω–Ω—ã–µ —à–∫–æ–ª
        schools = self.schools_data[0]["schools"][self.current_school_type.get()]
        for row, school in enumerate(schools, 1):
            # –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã
            ctk.CTkLabel(self.schools_table_frame, text=school['name']).grid(
                row=row, column=0, padx=5, pady=5)
            
            # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
            primary_var = ctk.IntVar(value=school.get('primary_count', 0))
            secondary_var = ctk.IntVar(value=school.get('secondary_count', 0))
            total_var = ctk.IntVar(value=primary_var.get() + secondary_var.get())
            
            primary_entry = ctk.CTkEntry(self.schools_table_frame, textvariable=primary_var, width=80)
            primary_entry.grid(row=row, column=1, padx=5, pady=5)
            primary_entry.bind('<KeyRelease>', lambda e, p=primary_var, s=secondary_var, t=total_var: 
                             self.update_total(p, s, t))
            
            secondary_entry = ctk.CTkEntry(self.schools_table_frame, textvariable=secondary_var, width=80)
            secondary_entry.grid(row=row, column=2, padx=5, pady=5)
            secondary_entry.bind('<KeyRelease>', lambda e, p=primary_var, s=secondary_var, t=total_var: 
                               self.update_total(p, s, t))
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total_label = ctk.CTkLabel(self.schools_table_frame, textvariable=total_var)
            total_label.grid(row=row, column=3, padx=5, pady=5)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            btn_frame = ctk.CTkFrame(self.schools_table_frame, fg_color="transparent")
            btn_frame.grid(row=row, column=4, padx=5, pady=5)
            
            ctk.CTkButton(btn_frame, text="‚úèÔ∏è", width=30, height=30,
                         command=lambda s=school: self.edit_school(s)).pack(side="left", padx=2)
            ctk.CTkButton(btn_frame, text="üóëÔ∏è", width=30, height=30, fg_color="red", hover_color="dark red",
                         command=lambda s=school: self.delete_school(s)).pack(side="left", padx=2)

    def update_total(self, primary_var, secondary_var, total_var):
        try:
            total = primary_var.get() + secondary_var.get()
            total_var.set(total)
        except:
            total_var.set(0)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ common_values
            values_file = self.parent_dir.parent / 'common_values.txt'
            if values_file.exists():
                with open(values_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        if ':' in line:
                            key, value = line.split(':', 1)
                            key = key.strip()
                            value = value.strip()
                            
                            if key == "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è":
                                self.common_values["cost_eat"].set(float(value))
                            elif key == "–ö–æ–ª-–≤–æ –¥–Ω–µ–π":
                                self.common_values["day_count"].set(int(value))
                            elif key == "–î–∞—Ç–∞":
                                self.common_values["date"].set(value)
                            elif key == "–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞":
                                self.common_values["date_conclusion"].set(value)
                            elif key == "–ì–æ–¥":
                                self.common_values["year"].set(value)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ —à–∫–æ–ª
            config_file = self.parent_dir / "data" / "config.json"
            if config_file.exists():
                with open(config_file, 'r', encoding='utf-8') as f:
                    self.schools_data = json.load(f)
                
                self.update_schools_display()
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def generate_contracts(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤"""
        try:
            self.log_text.delete("1.0", "end")
            self.log_text.insert("end", "–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤...\n")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            # –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ
            
            if not all([self.common_values[key].get() for key in self.common_values]):
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!")
                return
                
            self.log_text.insert("end", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–æ–≥–æ–≤–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
    ##
    def add_school(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —à–∫–æ–ª—ã"""
        # –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—ã
        dialog = ctk.CTkToplevel(self)
        dialog.title("–î–æ–±–∞–≤–∏—Ç—å —à–∫–æ–ª—É")
        dialog.geometry("400x300")
        dialog.transient(self)
        dialog.grab_set()
        
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —à–∫–æ–ª—ã
        # ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à–∫–æ–ª—ã

    def edit_school(self, school):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã"""
        # –î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    def delete_school(self, school):
        """–£–¥–∞–ª–µ–Ω–∏–µ —à–∫–æ–ª—ã"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å —à–∫–æ–ª—É {school['name']}?"):
            # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            pass

    def load_values(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        self.load_data()
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

    def save_values(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ common_values
            values_file = self.parent_dir.parent / 'common_values.txt'
            with open(values_file, 'w', encoding='utf-8') as f:
                f.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–Ω—è: {self.common_values['cost_eat'].get()}\n")
                f.write(f"–ö–æ–ª-–≤–æ –¥–Ω–µ–π: {self.common_values['day_count'].get()}\n")
                f.write(f"–î–∞—Ç–∞: {self.common_values['date'].get()}\n")
                f.write(f"–î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: {self.common_values['date_conclusion'].get()}\n")
                f.write(f"–ì–æ–¥: {self.common_values['year'].get()}\n")
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

if __name__ == "__main__":
    app = ContractAuto_App()
    app.mainloop()